labs(
title = "Project Gantt Chart",
x = "Date",
y = "Activity",
color = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "bottom"
) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d")
# Load required libraries
if(!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
if(!requireNamespace("lubridate", quietly = TRUE)) {
install.packages("lubridate")
}
library(tidyverse)
library(lubridate)
# Create a data frame with specific project activities and time spent
project_activities <- data.frame(
activity = c("Data Collection", "Data Cleaning", "Exploratory Data Analysis",
"App Development - Initial", "App Development - Shinydashboard", "Documentation & Testing"),
date = ymd(c("2023-09-03", "2023-09-04", "2023-09-05", "2023-09-06", "2023-09-12", "2023-10-01")),
hours_spent = c(2, 4, 4, 12, 3, 3)
)
# Print the project activities data frame
print(project_activities)
# Create a bar plot to visualize the hours spent on each activity
ggplot(project_activities, aes(x = reorder(activity, -hours_spent), y = hours_spent, fill = activity)) +
geom_bar(stat = "identity") +
labs(
title = "Hours Spent on Each Project Activity",
x = "Activity",
y = "Hours Spent",
fill = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
coord_flip()
# Create a timeline plot to visualize when each activity was done
ggplot(project_activities, aes(x = date, y = activity, color = activity)) +
geom_point(size = 5) +
geom_text(aes(label = activity), vjust = -1, hjust = -0.5) +
labs(
title = "Project Activity Timeline",
x = "Date",
y = "Activity",
color = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none"
)
# Load required libraries
if(!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
if(!requireNamespace("lubridate", quietly = TRUE)) {
install.packages("lubridate")
}
library(tidyverse)
library(lubridate)
# Create a data frame with specific project activities and time spent
project_activities <- data.frame(
activity = c("Data Collection", "Data Cleaning", "Exploratory Data Analysis",
"App Development - Initial", "App Development - Shinydashboard", "Documentation & Testing"),
date = ymd(c("2023-09-03", "2023-09-04", "2023-09-05", "2023-09-06", "2023-09-12", "2023-10-01")),
hours_spent = c(2, 4, 4, 8, 3, 3)
)
# Print the project activities data frame
print(project_activities)
# Create a bar plot to visualize the hours spent on each activity
ggplot(project_activities, aes(x = reorder(activity, -hours_spent), y = hours_spent, fill = activity)) +
geom_bar(stat = "identity") +
labs(
title = "Hours Spent on Each Project Activity",
x = "Activity",
y = "Hours Spent",
fill = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
coord_flip()
# Create a timeline plot to visualize when each activity was done
ggplot(project_activities, aes(x = date, y = activity, color = activity)) +
geom_point(size = 5) +
geom_text(aes(label = activity), vjust = -1, hjust = -0.5) +
labs(
title = "Project Activity Timeline",
x = "Date",
y = "Activity",
color = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none"
)
library(tidyverse)
library(lubridate)
# Creating a data frame with specific project activities and time spent
project_activities <- data.frame(
activity = c("Data Collection", "Data Cleaning", "Exploratory Data Analysis",
"App Development - Initial", "App Development - Shinydashboard", "Documentation & Testing"),
date = ymd(c("2023-09-03", "2023-09-04", "2023-09-05", "2023-09-06", "2023-09-12", "2023-10-01")),
hours_spent = c(2, 4, 4, 8, 3, 3)
)
# Print the project activities data frame
print(project_activities)
# Create a bar plot to visualize the hours spent on each activity
ggplot(project_activities, aes(x = reorder(activity, -hours_spent), y = hours_spent, fill = activity)) +
geom_bar(stat = "identity") +
labs(
title = "Hours Spent on Each Project Activity",
x = "Activity",
y = "Hours Spent",
fill = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
coord_flip()
# Create a timeline plot to visualize when each activity was done
ggplot(project_activities, aes(x = date, y = activity, color = activity)) +
geom_point(size = 5) +
geom_text(aes(label = activity), vjust = -1, hjust = -0.5) +
labs(
title = "Project Activity Timeline",
x = "Date",
y = "Activity",
color = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none"
)
ggsave("hours_spent_plot.png", plot = hours_plot, width = 10, height = 6, dpi = 300)
library(tidyverse)
library(lubridate)
# Creating a data frame with specific project activities and time spent
project_activities <- data.frame(
activity = c("Data Collection", "Data Cleaning", "Exploratory Data Analysis",
"App Development - Initial", "App Development - Shinydashboard", "Documentation & Testing"),
date = ymd(c("2023-09-03", "2023-09-04", "2023-09-05", "2023-09-06", "2023-09-12", "2023-10-01")),
hours_spent = c(2, 4, 4, 8, 3, 3)
)
# Print the project activities data frame
print(project_activities)
# Create a bar plot to visualize the hours spent on each activity
hours_plot <- ggplot(project_activities, aes(x = reorder(activity, -hours_spent), y = hours_spent, fill = activity)) +
geom_bar(stat = "identity") +
labs(
title = "Hours Spent on Each Project Activity",
x = "Activity",
y = "Hours Spent",
fill = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
coord_flip()
# Create a timeline plot to visualize when each activity was done
timeline_plot <- ggplot(project_activities, aes(x = date, y = activity, color = activity)) +
geom_point(size = 5) +
geom_text(aes(label = activity), vjust = -1, hjust = -0.5) +
labs(
title = "Project Activity Timeline",
x = "Date",
y = "Activity",
color = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none"
)
ggsave("hours_spent_plot.png", plot = hours_plot, width = 10, height = 6, dpi = 300)
ggsave("activity_timeline_plot.png", plot = timeline_plot, width = 10, height = 6, dpi = 300)
library(tidyverse)
library(lubridate)
# Creating a data frame with specific project activities and time spent
project_activities <- data.frame(
activity = c("Data Collection", "Data Cleaning", "Exploratory Data Analysis",
"App Development - Initial", "App Development - Shinydashboard", "Documentation & Testing"),
date = ymd(c("2023-09-03", "2023-09-04", "2023-09-05", "2023-09-06", "2023-09-12", "2023-10-01")),
hours_spent = c(2, 4, 4, 8, 3, 3)
)
# Print the project activities data frame
print(project_activities)
# Create a bar plot to visualize the hours spent on each activity
ggplot(project_activities, aes(x = reorder(activity, -hours_spent), y = hours_spent, fill = activity)) +
geom_bar(stat = "identity") +
labs(
title = "Hours Spent on Each Project Activity",
x = "Activity",
y = "Hours Spent",
fill = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
coord_flip()
# Create a timeline plot to visualize when each activity was done
ggplot(project_activities, aes(x = date, y = activity, color = activity)) +
geom_point(size = 5) +
geom_text(aes(label = activity), vjust = -1, hjust = -0.5) +
labs(
title = "Project Activity Timeline",
x = "Date",
y = "Activity",
color = "Activity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none"
)
shiny::runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/individual-project/324-individual-project/sleep')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/individual-project/324-individual-project/sleep')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/individual-project/324-individual-project/sleep')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/individual-project/324-individual-project/sleep')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/individual-project/324-individual-project/sleep')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/individual-project/324-individual-project/sleep')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/individual-project/324-individual-project/sleep')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/individual-project/324-individual-project/sleep')
# Read the .txt file into R
data <- read.table("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group project/Log.txt", header = TRUE, sep = ",")
# Read the .txt file into R
data <- read.table("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group project/Log.txt", header = TRUE, sep = ",")
# Read the .txt file into R
data <- read.table("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.txt", header = TRUE, sep = ",")
# Read the .txt file into R
data <- read.table("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.txt", header = TRUE, sep = ",")
# Read the .txt file into R
data <- read.table("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.txt", header = TRUE, sep = ",")
# Read the .txt file into R
data <- read.table("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.txt", header = TRUE, sep = ",")
# Read the CSV file into R
data <- read.csv("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.csv")
# Replace "your_file.csv" with the actual path to your CSV file.
View(data)
# Read the CSV file into R
data <- read.csv("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.csv", sep = ",")
# Replace "your_file.csv" with the actual path to your CSV file.
# Read the CSV file into R
data <- read.csv("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.csv", sep = ",")
# Replace "your_file.csv" with the actual path to your CSV file.
View(data)
# Read the CSV file into R
data <- read.csv("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.txt", sep = ",")
# Replace "your_file.csv" with the actual path to your CSV file.
View(data)
# Read the CSV file into R
data <- read.csv("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.txt", sep = ",")
write.csv(data, "Log.csv", row.names = FALSE)
# Read the CSV file into R
data <- read.csv("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.csv", sep = ",")
View(data)
# Create a box plot for time
ggplot(data = dataset, aes(x = piece, y = time)) +
geom_boxplot() +
labs(x = "Piece", y = "Time") +
ggtitle("Box Plot of Time by Piece")
library(ggplot2)
# Create a box plot for time
ggplot(data = dataset, aes(x = piece, y = time)) +
geom_boxplot() +
labs(x = "Piece", y = "Time") +
ggtitle("Box Plot of Time by Piece")
library(ggplot2)
# Create a box plot for time
ggplot(data = data, aes(x = piece, y = time)) +
geom_boxplot() +
labs(x = "Piece", y = "Time") +
ggtitle("Box Plot of Time by Piece")
# Create a box plot for distance
ggplot(data = data, aes(x = piece, y = distance)) +
geom_boxplot() +
labs(x = "Piece", y = "Distance") +
ggtitle("Box Plot of Distance by Piece")
library(ggplot2)
# Create a histogram for time
ggplot(data = data, aes(x = time)) +
geom_histogram(binwidth = 1) +
labs(x = "Time", y = "Frequency") +
ggtitle("Histogram of Time")
# Create a histogram for distance
ggplot(data = data, aes(x = distance)) +
geom_histogram(binwidth = 0.5) +
labs(x = "Distance", y = "Frequency") +
ggtitle("Histogram of Distance")
# Load required library
library(ggplot2)
# Create a scatter plot with a trendline
ggplot(data = your_dataset, aes(x = time, y = distance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "Time", y = "Distance") +
ggtitle("Scatter Plot of Time vs. Distance with Trendline")
# Load required library
library(ggplot2)
# Create a scatter plot with a trendline
ggplot(data = data, aes(x = time, y = distance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "Time", y = "Distance") +
ggtitle("Scatter Plot of Time vs. Distance with Trendline")
# Calculate the correlation matrix
cor_matrix <- cor(data[, c("time", "distance")])
# Create a heatmap of the correlation matrix
library(ggplot2)
library(reshape2)
cor_matrix_melted <- melt(cor_matrix)
ggplot(cor_matrix_melted, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "red", high = "blue") +
labs(x = "Variable 1", y = "Variable 2", fill = "Correlation") +
ggtitle("Correlation Heatmap between Time and Distance")
# Create a pie chart of piece distribution
library(ggplot2)
piece_counts <- table(your_dataset$piece)
# Create a pie chart of piece distribution
library(ggplot2)
piece_counts <- table(data$piece)
pie_chart_data <- data.frame(piece = names(piece_counts), count = piece_counts)
ggplot(pie_chart_data, aes(x = "", y = count, fill = piece)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(fill = "Piece", x = NULL, y = NULL) +
ggtitle("Pie Chart of Piece Distribution")
# Calculate the average time and distance by piece
library(dplyr)
avg_data <- data %>%
group_by(piece) %>%
summarize(avg_time = mean(time), avg_distance = mean(distance))
# Create a grouped bar plot
ggplot(avg_data, aes(x = piece)) +
geom_bar(aes(y = avg_time), stat = "identity", fill = "blue", alpha = 0.5) +
geom_bar(aes(y = avg_distance), stat = "identity", fill = "red", alpha = 0.5) +
labs(x = "Piece", y = "Average Value", fill = NULL) +
ggtitle("Average Time and Distance by Piece") +
scale_fill_manual(values = c("blue", "red"), name = "Variable", labels = c("Time", "Distance")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate the average time and distance by piece
library(dplyr)
avg_data <- your_dataset %>%
group_by(piece) %>%
summarize(avg_time = mean(time), avg_distance = mean(distance))
# Calculate the average time and distance by piece
library(dplyr)
avg_data <- data %>%
group_by(piece) %>%
summarize(avg_time = mean(time), avg_distance = mean(distance))
# Create a grouped bar plot with a legend
ggplot(avg_data, aes(x = piece)) +
geom_bar(aes(y = avg_time, fill = "Time"), stat = "identity", alpha = 0.5) +
geom_bar(aes(y = avg_distance, fill = "Distance"), stat = "identity", alpha = 0.5) +
labs(x = "Piece", y = "Average Value", fill = NULL) +
ggtitle("Average Time and Distance by Piece") +
scale_fill_manual(values = c("Time" = "blue", "Distance" = "red"),
name = "Variable",
labels = c("Time", "Distance")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load required library
library(ggplot2)
# Create a scatter plot with a trendline
ggplot(data = data, aes(x = time, y = distance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "Time", y = "Distance") +
ggtitle("Scatter Plot of Time vs. Distance with Trendline")
# Read the CSV file into R
data <- read.csv("~/OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/Log.csv", sep = ",")
# Load required library
library(ggplot2)
# Create a scatter plot with a trendline
ggplot(data = data, aes(x = time, y = distance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "Time", y = "Distance") +
ggtitle("Scatter Plot of Time vs. Distance with Trendline")
# Calculate the average time and distance by piece
library(dplyr)
avg_data <- data %>%
group_by(piece) %>%
summarize(avg_time = mean(time), avg_distance = mean(distance))
# Create a grouped bar plot with a legend
ggplot(avg_data, aes(x = piece)) +
geom_bar(aes(y = avg_time, fill = "Time"), stat = "identity", alpha = 0.5) +
geom_bar(aes(y = avg_distance, fill = "Distance"), stat = "identity", alpha = 0.5) +
labs(x = "Piece", y = "Average Value", fill = NULL) +
ggtitle("Average Time and Distance by Piece") +
scale_fill_manual(values = c("Time" = "blue", "Distance" = "red"),
name = "Variable",
labels = c("Time", "Distance")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(shiny); runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
install.packages("shinyjs")
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
library(shiny); runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
library(shiny); runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
library(readxl)
# Load libraries
library(ggplot2)
library(plotly)
library(readxl)
# Read the data from the Excel file
df <- read_excel("player_positions_data.xlsx", sheet = 1)
# Load libraries
library(ggplot2)
library(plotly)
library(readxl)
# Read the data from the Excel file
df <- read_excel("player_positions_data.xlsx", sheet = 1)
library(plotly)
library(readxl)
# Read the data from the Excel file
df <- read_excel("OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/player_positions_data.xlsx", sheet = 1)
# 2D Heatmap using ggplot2
ggplot(df, aes(x = X, y = Y, fill = ..density..)) +
geom_bin2d(bins = 30) +
scale_fill_viridis_c() +
labs(title = "2D Heatmap of Player Positions", x = "X Coordinate", y = "Y Coordinate")
# 3D Scatter Plot using plotly
plot_ly(df, x = ~X, y = ~Y, z = ~Z, color = ~Timestamp, type = "scatter3d", mode = "markers") %>%
layout(scene = list(aspectmode = "cube"))
# Note: Ensure that you have the correct file path in the read.xlsx function
# Note: Ensure that you have the correct file path in the read.xlsx function
ggplot(df, aes(x = X, y = Y, fill = ..density..)) +
geom_bin2d(bins = 30) +
scale_fill_viridis_c() +
labs(title = "2D Heatmap of Player Positions", x = "X Coordinate", y = "Y Coordinate")
# 3D Scatter Plot using plotly
plot_ly(df, x = ~X, y = ~Y, z = ~Z, color = ~Timestamp, type = "scatter3d", mode = "markers") %>%
layout(scene = list(aspectmode = "cube"))
ggplot(df, aes(x = X, y = Y, fill = ..density..)) +
geom_bin2d(bins = 30) +
scale_fill_viridis_c() +
labs(title = "2D Heatmap of Player Positions", x = "X Coordinate", y = "Y Coordinate")
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
library(shiny); runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
deployApp()
deployApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR.R')
deployApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src')
runApp('Library/CloudStorage/OneDrive-GrinnellCollege/2023-24/Fall/CSC324/individual-project/324-individual-project/labs/lab6/VR-Assessment-Strategy')
runApp('Library/CloudStorage/OneDrive-GrinnellCollege/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src/VR-Assessment-Strategy')
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src')
deployApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src')
deployApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src-final')
shiny::runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src-final')
rsconnect
runApp('OneDrive - Grinnell College/2023-24/Fall/CSC324/group-project/VR-Assessment-Strategy/src-final')
